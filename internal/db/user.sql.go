// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CheckEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, CheckEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const CheckUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, CheckUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const GetBatchedUsers = `-- name: GetBatchedUsers :many
SELECT 
    u.id, u.username, u.email, u.name, u.password_hash, u.bio, u.image, u.online, u.email_verified_at, u.created_at, u.deleted_at, 
    COUNT(f.id) AS friend_count
FROM 
    users u
LEFT JOIN 
    friendships f
    ON (u.id = f.user_id OR u.id = f.friend_id) AND f.status = 'accepted'
WHERE 
    u.id = ANY($1::BIGINT[])
GROUP BY 
    u.id
`

type GetBatchedUsersRow struct {
	ID              int64
	Username        string
	Email           string
	Name            string
	PasswordHash    []byte
	Bio             *string
	Image           *string
	Online          bool
	EmailVerifiedAt pgtype.Timestamptz
	CreatedAt       pgtype.Timestamptz
	DeletedAt       pgtype.Timestamptz
	FriendCount     int64
}

func (q *Queries) GetBatchedUsers(ctx context.Context, userIds []int64) ([]GetBatchedUsersRow, error) {
	rows, err := q.db.Query(ctx, GetBatchedUsers, userIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBatchedUsersRow
	for rows.Next() {
		var i GetBatchedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Name,
			&i.PasswordHash,
			&i.Bio,
			&i.Image,
			&i.Online,
			&i.EmailVerifiedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.FriendCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUser = `-- name: GetUser :one
SELECT 
    u.id, u.username, u.email, u.name, u.password_hash, u.bio, u.image, u.online, u.email_verified_at, u.created_at, u.deleted_at, 
    COUNT(f.id) AS friend_count
FROM 
    users u
LEFT JOIN 
    friendships f
    ON (u.id = f.user_id OR u.id = f.friend_id) AND f.status = 'accepted'
WHERE 
    u.id = $1
GROUP BY 
    u.id
`

type GetUserRow struct {
	ID              int64
	Username        string
	Email           string
	Name            string
	PasswordHash    []byte
	Bio             *string
	Image           *string
	Online          bool
	EmailVerifiedAt pgtype.Timestamptz
	CreatedAt       pgtype.Timestamptz
	DeletedAt       pgtype.Timestamptz
	FriendCount     int64
}

func (q *Queries) GetUser(ctx context.Context, userID int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, GetUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Image,
		&i.Online,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.FriendCount,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, name, password_hash, bio, image, online, email_verified_at, created_at, deleted_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Image,
		&i.Online,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserRoles = `-- name: GetUserRoles :one
SELECT ARRAY_AGG(r.name)::TEXT[] AS roles FROM roles r JOIN user_roles ur ON r.id = ur.role_id WHERE ur.user_id = $1 GROUP BY ur.user_id
`

func (q *Queries) GetUserRoles(ctx context.Context, userID int64) ([]string, error) {
	row := q.db.QueryRow(ctx, GetUserRoles, userID)
	var roles []string
	err := row.Scan(&roles)
	return roles, err
}

const InsertUser = `-- name: InsertUser :one
INSERT INTO users (
    username,
    email,
    name,
    password_hash,
    bio,
    image
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, username, email, name, password_hash, bio, image, online, email_verified_at, created_at, deleted_at
`

type InsertUserParams struct {
	Username     string
	Email        string
	Name         string
	PasswordHash []byte
	Bio          *string
	Image        *string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, InsertUser,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
		arg.Bio,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Image,
		&i.Online,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const InsertUserRole = `-- name: InsertUserRole :exec
INSERT INTO user_roles (
    user_id,
    role_id
) VALUES (
    $1,
    (SELECT r.id FROM roles r WHERE r.name = $2)
) ON CONFLICT(user_id, role_id) DO NOTHING
`

type InsertUserRoleParams struct {
	UserID   int64
	RoleName string
}

func (q *Queries) InsertUserRole(ctx context.Context, arg InsertUserRoleParams) error {
	_, err := q.db.Exec(ctx, InsertUserRole, arg.UserID, arg.RoleName)
	return err
}

const UpdateUser = `-- name: UpdateUser :exec
UPDATE users SET
    username = $1,
    name = $2,
    password_hash = COALESCE($3, password_hash),
    bio = $4,
    image = $5
WHERE id = $6
`

type UpdateUserParams struct {
	Username     string
	Name         string
	PasswordHash []byte
	Bio          *string
	Image        *string
	UserID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, UpdateUser,
		arg.Username,
		arg.Name,
		arg.PasswordHash,
		arg.Bio,
		arg.Image,
		arg.UserID,
	)
	return err
}

const UpdateUserEmailVerifiedAt = `-- name: UpdateUserEmailVerifiedAt :exec
UPDATE users SET email_verified_at = $1 WHERE id = $2
`

type UpdateUserEmailVerifiedAtParams struct {
	EmailVerifiedAt pgtype.Timestamptz
	UserID          int64
}

func (q *Queries) UpdateUserEmailVerifiedAt(ctx context.Context, arg UpdateUserEmailVerifiedAtParams) error {
	_, err := q.db.Exec(ctx, UpdateUserEmailVerifiedAt, arg.EmailVerifiedAt, arg.UserID)
	return err
}

const UpdateUserOnlineStatus = `-- name: UpdateUserOnlineStatus :exec
UPDATE users SET online = $1 WHERE id = $2
`

type UpdateUserOnlineStatusParams struct {
	Online bool
	UserID int64
}

func (q *Queries) UpdateUserOnlineStatus(ctx context.Context, arg UpdateUserOnlineStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateUserOnlineStatus, arg.Online, arg.UserID)
	return err
}
