// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_verification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const DeleteEmailVerificationToken = `-- name: DeleteEmailVerificationToken :exec
DELETE FROM email_verification_tokens WHERE id = $1
`

func (q *Queries) DeleteEmailVerificationToken(ctx context.Context, tokenID int64) error {
	_, err := q.db.Exec(ctx, DeleteEmailVerificationToken, tokenID)
	return err
}

const GetEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT 
    evt.id, evt.user_id, evt.token, evt.created_at, evt.expires_at,
    u.email AS email,
    u.name AS name
FROM email_verification_tokens evt 
JOIN users u ON evt.user_id = u.id
WHERE evt.token = $1
`

type GetEmailVerificationTokenRow struct {
	ID        int64
	UserID    int64
	Token     string
	CreatedAt pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
	Email     string
	Name      string
}

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token string) (GetEmailVerificationTokenRow, error) {
	row := q.db.QueryRow(ctx, GetEmailVerificationToken, token)
	var i GetEmailVerificationTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const InsertEmailVerificationToken = `-- name: InsertEmailVerificationToken :one
INSERT INTO email_verification_tokens (
    user_id, 
    token, 
    expires_at
) VALUES (
    $1, 
    $2,
    $3
) RETURNING id, user_id, token, created_at, expires_at
`

type InsertEmailVerificationTokenParams struct {
	UserID    int64
	Token     string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) InsertEmailVerificationToken(ctx context.Context, arg InsertEmailVerificationTokenParams) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, InsertEmailVerificationToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
