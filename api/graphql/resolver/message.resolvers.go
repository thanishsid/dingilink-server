package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"time"

	null "gopkg.in/guregu/null.v4"

	"github.com/thanishsid/dingilink-server/api/graphql/generated"
	"github.com/thanishsid/dingilink-server/internal/model"
	"github.com/thanishsid/dingilink-server/internal/services"
	"github.com/thanishsid/dingilink-server/internal/types"
)

// Sender is the resolver for the sender field.
func (r *audioMessageResolver) Sender(ctx context.Context, obj *model.AudioMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *audioMessageResolver) Group(ctx context.Context, obj *model.AudioMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Audio is the resolver for the audio field.
func (r *audioMessageResolver) Audio(ctx context.Context, obj *model.AudioMessage) (string, error) {
	return obj.Payload, nil
}

// SentAt is the resolver for the sentAt field.
func (r *audioMessageResolver) SentAt(ctx context.Context, obj *model.AudioMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Sender is the resolver for the sender field.
func (r *deletedMessageResolver) Sender(ctx context.Context, obj *model.DeletedMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *deletedMessageResolver) Group(ctx context.Context, obj *model.DeletedMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// SentAt is the resolver for the sentAt field.
func (r *deletedMessageResolver) SentAt(ctx context.Context, obj *model.DeletedMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *deletedMessageResolver) DeletedAt(ctx context.Context, obj *model.DeletedMessage) (*time.Time, error) {
	return null.NewTime(obj.DeletedAt.Time, obj.DeletedAt.Valid).Ptr(), nil
}

// Sender is the resolver for the sender field.
func (r *documentMessageResolver) Sender(ctx context.Context, obj *model.DocumentMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *documentMessageResolver) Group(ctx context.Context, obj *model.DocumentMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Document is the resolver for the document field.
func (r *documentMessageResolver) Document(ctx context.Context, obj *model.DocumentMessage) (string, error) {
	return obj.Payload, nil
}

// SentAt is the resolver for the sentAt field.
func (r *documentMessageResolver) SentAt(ctx context.Context, obj *model.DocumentMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Sender is the resolver for the sender field.
func (r *imageMessageResolver) Sender(ctx context.Context, obj *model.ImageMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *imageMessageResolver) Group(ctx context.Context, obj *model.ImageMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Image is the resolver for the image field.
func (r *imageMessageResolver) Image(ctx context.Context, obj *model.ImageMessage) (string, error) {
	return obj.Payload, nil
}

// SentAt is the resolver for the sentAt field.
func (r *imageMessageResolver) SentAt(ctx context.Context, obj *model.ImageMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Sender is the resolver for the sender field.
func (r *locationMessageResolver) Sender(ctx context.Context, obj *model.LocationMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *locationMessageResolver) Group(ctx context.Context, obj *model.LocationMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Location is the resolver for the location field.
func (r *locationMessageResolver) Location(ctx context.Context, obj *model.LocationMessage) (*types.LatLng, error) {
	if obj.Payload.Location.Valid {
		return obj.Payload.Location.LatLng(), nil
	}

	return nil, fmt.Errorf("failed to resolve location")
}

// SentAt is the resolver for the sentAt field.
func (r *locationMessageResolver) SentAt(ctx context.Context, obj *model.LocationMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Message is the resolver for the message field.
func (r *messageEventResolver) Message(ctx context.Context, obj *model.MessageEvent) (model.Message, error) {
	return r.Dataloader.GetMessage(ctx, obj.MessageID)
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationsResolver) SendMessage(ctx context.Context, input services.SendMessageInput) (model.Message, error) {
	return r.MessageService.SendMessage(ctx, input)
}

// Messages is the resolver for the messages field.
func (r *queriesResolver) Messages(ctx context.Context, chatID string, input *services.GetMessagesInput) (*model.MessageConnection, error) {
	var i services.GetMessagesInput

	if input != nil {
		i = *input
	}

	return r.MessageService.GetMessages(ctx, chatID, i)
}

// MessageEvents is the resolver for the messageEvents field.
func (r *subscriptionsResolver) MessageEvents(ctx context.Context) (<-chan *model.MessageEvent, error) {
	panic(fmt.Errorf("not implemented: MessageEvents - messageEvents"))
}

// Sender is the resolver for the sender field.
func (r *textMessageResolver) Sender(ctx context.Context, obj *model.TextMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *textMessageResolver) Group(ctx context.Context, obj *model.TextMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Text is the resolver for the text field.
func (r *textMessageResolver) Text(ctx context.Context, obj *model.TextMessage) (string, error) {
	return null.StringFromPtr(obj.TextContent).ValueOrZero(), nil
}

// SentAt is the resolver for the sentAt field.
func (r *textMessageResolver) SentAt(ctx context.Context, obj *model.TextMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Sender is the resolver for the sender field.
func (r *videoMessageResolver) Sender(ctx context.Context, obj *model.VideoMessage) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.SenderID)
}

// Group is the resolver for the group field.
func (r *videoMessageResolver) Group(ctx context.Context, obj *model.VideoMessage) (*model.Group, error) {
	if obj.GroupID == nil {
		return nil, nil
	}

	return r.Dataloader.GetGroup(ctx, *obj.GroupID)
}

// Video is the resolver for the video field.
func (r *videoMessageResolver) Video(ctx context.Context, obj *model.VideoMessage) (string, error) {
	return obj.Payload, nil
}

// SentAt is the resolver for the sentAt field.
func (r *videoMessageResolver) SentAt(ctx context.Context, obj *model.VideoMessage) (*time.Time, error) {
	return null.NewTime(obj.SentAt.Time, obj.SentAt.Valid).Ptr(), nil
}

// Type is the resolver for the type field.
func (r *sendMessageInputResolver) Type(ctx context.Context, obj *services.SendMessageInput, data string) error {
	obj.Type = model.MessageType(data)
	return nil
}

// AudioMessage returns generated.AudioMessageResolver implementation.
func (r *Resolver) AudioMessage() generated.AudioMessageResolver { return &audioMessageResolver{r} }

// DeletedMessage returns generated.DeletedMessageResolver implementation.
func (r *Resolver) DeletedMessage() generated.DeletedMessageResolver {
	return &deletedMessageResolver{r}
}

// DocumentMessage returns generated.DocumentMessageResolver implementation.
func (r *Resolver) DocumentMessage() generated.DocumentMessageResolver {
	return &documentMessageResolver{r}
}

// ImageMessage returns generated.ImageMessageResolver implementation.
func (r *Resolver) ImageMessage() generated.ImageMessageResolver { return &imageMessageResolver{r} }

// LocationMessage returns generated.LocationMessageResolver implementation.
func (r *Resolver) LocationMessage() generated.LocationMessageResolver {
	return &locationMessageResolver{r}
}

// MessageEvent returns generated.MessageEventResolver implementation.
func (r *Resolver) MessageEvent() generated.MessageEventResolver { return &messageEventResolver{r} }

// TextMessage returns generated.TextMessageResolver implementation.
func (r *Resolver) TextMessage() generated.TextMessageResolver { return &textMessageResolver{r} }

// VideoMessage returns generated.VideoMessageResolver implementation.
func (r *Resolver) VideoMessage() generated.VideoMessageResolver { return &videoMessageResolver{r} }

// SendMessageInput returns generated.SendMessageInputResolver implementation.
func (r *Resolver) SendMessageInput() generated.SendMessageInputResolver {
	return &sendMessageInputResolver{r}
}

type audioMessageResolver struct{ *Resolver }
type deletedMessageResolver struct{ *Resolver }
type documentMessageResolver struct{ *Resolver }
type imageMessageResolver struct{ *Resolver }
type locationMessageResolver struct{ *Resolver }
type messageEventResolver struct{ *Resolver }
type textMessageResolver struct{ *Resolver }
type videoMessageResolver struct{ *Resolver }
type sendMessageInputResolver struct{ *Resolver }
