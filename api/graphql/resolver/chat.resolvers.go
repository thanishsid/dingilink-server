package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/thanishsid/dingilink-server/api/graphql/generated"
	"github.com/thanishsid/dingilink-server/internal/model"
)

// User is the resolver for the user field.
func (r *directChatResolver) User(ctx context.Context, obj *model.DirectChat) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.UserID)
}

// User is the resolver for the user field.
func (r *directChatPreviewResolver) User(ctx context.Context, obj *model.DirectChatPreview) (*model.User, error) {
	return r.Dataloader.GetUser(ctx, obj.UserID)
}

// LastMessage is the resolver for the lastMessage field.
func (r *directChatPreviewResolver) LastMessage(ctx context.Context, obj *model.DirectChatPreview) (model.Message, error) {
	return r.Dataloader.GetMessage(ctx, obj.LastMessageID)
}

// Group is the resolver for the group field.
func (r *groupChatResolver) Group(ctx context.Context, obj *model.GroupChat) (*model.Group, error) {
	return r.Dataloader.GetGroup(ctx, obj.GroupID)
}

// Group is the resolver for the group field.
func (r *groupChatPreviewResolver) Group(ctx context.Context, obj *model.GroupChatPreview) (*model.Group, error) {
	return r.Dataloader.GetGroup(ctx, obj.GroupID)
}

// LastMessage is the resolver for the lastMessage field.
func (r *groupChatPreviewResolver) LastMessage(ctx context.Context, obj *model.GroupChatPreview) (model.Message, error) {
	return r.Dataloader.GetMessage(ctx, obj.LastMessageID)
}

// Chats is the resolver for the chats field.
func (r *queriesResolver) Chats(ctx context.Context) ([]model.ChatPreview, error) {
	return r.MessageService.GetChats(ctx)
}

// Chat is the resolver for the chat field.
func (r *queriesResolver) Chat(ctx context.Context, chatID string) (model.Chat, error) {
	return r.MessageService.GetChat(ctx, chatID)
}

// DirectChat returns generated.DirectChatResolver implementation.
func (r *Resolver) DirectChat() generated.DirectChatResolver { return &directChatResolver{r} }

// DirectChatPreview returns generated.DirectChatPreviewResolver implementation.
func (r *Resolver) DirectChatPreview() generated.DirectChatPreviewResolver {
	return &directChatPreviewResolver{r}
}

// GroupChat returns generated.GroupChatResolver implementation.
func (r *Resolver) GroupChat() generated.GroupChatResolver { return &groupChatResolver{r} }

// GroupChatPreview returns generated.GroupChatPreviewResolver implementation.
func (r *Resolver) GroupChatPreview() generated.GroupChatPreviewResolver {
	return &groupChatPreviewResolver{r}
}

type directChatResolver struct{ *Resolver }
type directChatPreviewResolver struct{ *Resolver }
type groupChatResolver struct{ *Resolver }
type groupChatPreviewResolver struct{ *Resolver }
